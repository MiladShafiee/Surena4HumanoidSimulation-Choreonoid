#ifndef OPENHRP_COLLISION_DETECTOR_IDL_INCLUDED
#define OPENHRP_COLLISION_DETECTOR_IDL_INCLUDED

/** @file idl/OpenHRP/CollisionDetector.idl
 * @if jp
 * CollisionDetector サーバ関連インターフェース
 * @endif
 */

#include <cnoid/corba/OpenHRP/3.1/ModelLoader.idl>
#include <cnoid/corba/OpenHRP/3.1/World.idl>

module OpenHRP {

  /**
   * @if jp
   * CollisionDetector インターフェース
   *
   * このサーバは衝突検出とその法線ベクトルの算出を行います。
   * 通常、 DynamicsSimulator から呼び出されるため、直接このサーバにアクセスする必要はありません。
   * @endif
   */
  interface CollisionDetector : World
  {
    void destroy();
  
    /**
     * @if jp
     * @brief 干渉チェックペアを追加します。
     * @param   collisionPair       干渉チェックペア
     * @else
     * Adding Polygon Set Pairs
     * @param   collisionPair       Collision Pair
     * @endif
    */
    void addCollisionPair(in LinkPair collisionPair);
  

    /**
     * @if jp
     * 既に設定されたペアから衝突検出を行います。
     * @param checkAll 全てをチェックするか(falseを設定するとひとつ衝突を検出した時点で終了します)
     * @param positions キャラクタの位置/姿勢
     * @param collidedPairs 衝突しているペアの配列(衝突していなければ長さは0)
     * @return ひとつでも衝突していれば true, 衝突していなければ false
     * @else
     * Check for Collision between pre-defined Pairs
     * @param  checkAll     true:  Check All Pairs
     * 		  false: Stop when 1 collision is found
     * @param  positions    Position and Attitude of Object
     * @param  collidedPairs  Array of Pairs that are colliding(If none length is 0)
     * @return true:  At least one pair is colliding
     *      false: No pairs are colliding
     * @endif
     */
    boolean queryIntersectionForDefinedPairs
    (
     in boolean checkAll,
     in CharacterPositionSequence positions,
     out LinkPairSequence collidedPairs
     );
  
    /**
     * @if jp
     * ペアを設定し衝突検出を行います。
     * @param checkAll 全てのペアをチェックするか(falseを設定するとひとつ衝突を検出した時点で終了します)
     * @param checkPairs ペア
     * @param positions キャラクタの位置/姿勢
     * @param collidedPairs 衝突しているペアの配列(衝突していなければ長さは0)
     * @return ひとつでも衝突していれば true, 衝突していなければ false
     * @else
     * Check for Collision between Given Pairs
     *    
     * @param  checkAll     true:  Check All Pairs
     *                     false: Return when 1 collision is found
     * @param  checkPairs   Array of Pairs to check for Collision
     * @param  positions    Position and Attitude of Object
     * @param  collidedPairs  Array of Pairs that are colliding(If none length is 0)
     * @return true:  At least one pair is colliding
     *         false: No pairs are colliding
     * @endif
     */
    boolean queryIntersectionForGivenPairs
    (
     in boolean checkAll,
     in LinkPairSequence checkPairs,
     in CharacterPositionSequence positions,
     out LinkPairSequence collidedPairs
     );
  
    /**
     * @if jp
     * すでに設定したペアの衝突情報を取得します。
     * @param positions キャラクタの位置/姿勢
     * @param collisions 衝突情報
     * @return ひとつでも衝突していれば true, 衝突していなければ false
     * @else
     * Get Collision State Information of pre-defined Pairs
     *
     * @param  positions    Position of Object
     * @param  collisions     Collision Information
     * @return true:        At least one pair is colliding
     *         false:       No pairs are colliding
     * @endif
     */
    boolean queryContactDeterminationForDefinedPairs(
						     in CharacterPositionSequence positions,
						     out CollisionSequence collisions
						     );

    /**
     * @if jp
     * ペアを与え衝突情報を取得します。
     * @param checkPairs ペア
     * @param positions キャラクタの位置/姿勢
     * @param collisions 衝突情報
     * @return ひとつでも衝突していれば true, 衝突していなければ false
     * @else
     * Get Collision State Information for given Pairs
     *
     * @param  checkPairs   Array of pairs to check for collision
     * @param  positions    Position of Object
     * @param  collisions     Collision Information
     * @return true:        At least one pair is colliding
     *         false:       No pairs are colliding
     * @endif
     */
    boolean queryContactDeterminationForGivenPairs(
						   in LinkPairSequence checkPairs,
						   in CharacterPositionSequence positions,
						   out CollisionSequence collisions
						   );

    /**
     * @if jp
     * 既に設定されたペアに対して距離計算を行います。
     * @param positions キャラクタの位置/姿勢
     * @param distances 各ペアに対する距離情報の配列
     * @else
     * Check for Distance between pre-defined Pairs
     * @param  positions    Position and Attitude of Object
     * @param  distances  Array of distance information 
     * @endif
     */
    void queryDistanceForDefinedPairs
    (
     in CharacterPositionSequence positions,
     out DistanceSequence distances
     );
  
    /**
     * @if jp
     * ペアを設定し距離計算を行います。
     * @param checkPairs ペア
     * @param positions キャラクタの位置/姿勢
     * @param distances 各ペアに対する距離情報の配列
     * @else
     * Check for Distance between Given Pairs
     * @param  checkPairs   Array of Pairs to check for Collision
     * @param  positions    Position and Attitude of Object
     * @param  distances  Array of distance information 
     * @endif
     */
    void queryDistanceForGivenPairs
    (
     in LinkPairSequence checkPairs,
     in CharacterPositionSequence positions,
     out DistanceSequence distances
     );

    /**
     * @brief query the minimum distance between a point and all meshes along ray
     * @param point a point
     * @param dir direction of the ray
     * @return distance if the ray collides, 0 otherwise
     */
    double queryDistanceWithRay(in DblArray3 point, in DblArray3 dir);

    /**
     * @brief scan distances between a point and all meshes 
     * @param p position of the ray source
     * @param R orientation of the ray source 
     * @param step step angle[rad] to scan
     * @param range scan range[rad]. The ray scans in x-z plane from right to left, front direction is -z like camera coordinates.
     * @return sequence of distance
     */
    DblSequence scanDistanceWithRay(in DblArray3 p, in DblArray9 R,
				    in double step, in double range);
  };

  /**
   * CollisionDetectorFactory
   */
  interface CollisionDetectorFactory : ServerObject
  {
    /**
     * @if jp
     * CollisionDetector を取得します。
     * @endif
     */
    CollisionDetector create();
  };

};

#endif
