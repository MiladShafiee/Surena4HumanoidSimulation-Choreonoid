// -*- mode: idl; indent-tabs-mode: t; tab-width: 4; c-basic-offset: 4; -*-
/*
 * Copyright (c) 2008, AIST, the University of Tokyo and General Robotix Inc.
 * All rights reserved. This program is made available under the terms of the
 * Eclipse Public License v1.0 which accompanies this distribution, and is
 * available at http://www.eclipse.org/legal/epl-v10.html
 * Contributors:
 * National Institute of Advanced Industrial Science and Technology (AIST)
 * General Robotix Inc. 
 */
#ifndef OPENHRP_CONTROLLER_IDL_INCLUDED
#define OPENHRP_CONTROLLER_IDL_INCLUDED

/** @file Controller/corba/Controller.idl
 * @if jp
 * Controller サーバ関連インターフェース
 * @else
 * Controller IDL
 * @endif
 * @author Ichitaro Kohara Kernel Inc.
 * @date 2000/03/24
 */

#include <cnoid/corba/OpenHRP/3.0/OpenHRPCommon.idl>
#include <cnoid/corba/OpenHRP/3.0/DynamicsSimulator.idl>
#include <cnoid/corba/OpenHRP/3.0/ViewSimulator.idl>


module OpenHRP {

	/**
	 * @if jp
	 * @brief Controller インターフェース。
	 *
	 * 制御ソフトの役割を果たします。 Controller は以下の流れを行うように作成してください。
	 *
	 * -# コンストラクタで起動時の初期化
	 * -# start() でシミュレーション開始時の初期化
	 * -# input() でシミュレータからセンサ情報を得る
	 * -# control() センサ情報から制御計算を行う
	 * -# output() でアクチュエータに情報をセットする
	 * 
	 * @note 今後OpenHRPのコントローラはOpenRTMのコンポーネントとして作成するのが標準となります。
	 * 従って、一般的な使用においては本インタフェースを直接使う必要はありません。
	 *
	 * @else
	 * Controller Interface
	 * @endif
	 */
	interface Controller {
		/**
		 * @if jp
		 * @brief DynamicsSimulator をセットする。
		 *
		 * クライアントが Controller サーバを使用する際、 DynamicsSimulator への参照をセットします。
		 * @param dynamicssimulator_ DynamicsSimulator への参照
		 * @endif
		 */
		void setDynamicsSimulator(in DynamicsSimulator dynamicssimulator_);

		/**
		 * @if jp
		 * @brief ViewSimulatorをセットする。
		 *
		 * setDynamicsSimulator() と同様に ViewSimulator を使用する Controller に
		 * 接続する際はこのメソッドでセットします。
		 *
		 * @param viewsimulator_ ViewSimulator への参照
		 * @endif
		 */
		void setViewSimulator(in ViewSimulator viewsimulator_);

		/**
		 * @if jp
		 * @brief シミュレーションループが始まる前に１回呼ばれます。
		 *
		 * シミュレーション前の初期化はここに書いてください。
		 * @else
		 * This method is called just before beginning periodic calls of control().
		 *
		 * Initialization that requires the initial state of a robot
		 * should be done in this method.
		 * @endif
		 */
		void start();

		/**
		 * @if jp
		 * @brief 制御計算を行います。
		 *
		 * シミュレーションループにおいて input() で取得した情報を使用して計算を行い、 output() で出力します。
		 * @endif
		 */
		void control();

		/**
		 * @if jp
		 * @brief センサ情報の取得を行います。
		 *
		 * DynamicsSimulator::getCharacterSensorState() 等を使用してセンサ情報を取得します。
		 * @endif
		 */
		void input();

		/**
		 * @if jp
		 * @brief アクチュエータなどへ情報を出力します。
		 *
		 * DynamicsSimulator::setCharacterLinkData() 等を使用してシミュレータへ情報を出力します。
		 * @endif
		 */
		void output();

		/**
		 * @if jp
		 * シミュレーションループが終了した際に呼ばれます。
		 * @else
		 * This method is called when the control loop is finished.
		 * @endif
		 */
		void stop();

		/**
		 * @if jp
		 * サーバを終了します。
		 * @endif
		 */
		void destroy();

        /**
		 * @if jp
		 * controllerのtimeStepを設定します。
		 * @endif
		 */
        void setTimeStep(in double timeStep);
	};
	

	/**
	 * @if jp
	 * Controller Factory
	 * @else
	 * Controller Object Factory
	 * @endif
	 */
	interface ControllerFactory : ServerObject
	{
		
		/**
		 * @if jp
		 * Controller を取得します。
		 * @param charname このコントローラが制御するキャラクタ名
		 * @return 新しく作成された Controller
		 * @else
		 * Create a controller object
		 * @param charname name of the controlled character
		 * @return a newly creatd controller
		 * @endif
		 */
		Controller create(in string charname);
		
	};
	
};

#endif
