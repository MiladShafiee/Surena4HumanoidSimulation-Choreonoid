/*
 * Copyright (c) 2008, AIST, the University of Tokyo and General Robotix Inc.
 * All rights reserved. This program is made available under the terms of the
 * Eclipse Public License v1.0 which accompanies this distribution, and is
 * available at http://www.eclipse.org/legal/epl-v10.html
 * Contributors:
 * National Institute of Advanced Industrial Science and Technology (AIST)
 * General Robotix Inc. 
 */
#ifndef OPENHRP_MODEL_LOADER_IDL_INCLUDED
#define OPENHRP_MODEL_LOADER_IDL_INCLUDED

/** @file ModelLoader/corba/ModelLoader.idl
 * @if jp
 * ModelLoader サーバ関連インターフェース
 * @endif
 */

#include <cnoid/corba/OpenHRP/3.0/OpenHRPCommon.idl>

module OpenHRP {

  /**
   * @if jp
   * センサ種別
   * @else
   * Definition of Sensor Types
   * @endif
   */
  enum SensorType {
    FORCE_SENSOR,         ///< 6-axis force sensor
    RATE_GYRO, 
    ACCELERATION_SENSOR, 
    PRESSURE_SENSOR, 
    PHOTO_INTERRUPTER,
    VISION_SENSOR,
    TORQUE_SENSOR         ///< joint torque sensor
  };

  /**
   * @if jp
   * センサ情報
   * @endif
   */
  interface SensorInfo
  {
    /**
     * @if jp
     * センサID
     * @endif
     */
    readonly attribute long	   id;

    /**
     * @if jp
     * センサ名
     * @endif
     */
    readonly attribute string      name;

    /**
     * @if jp
     * センサ種別
     * @endif
     */
    readonly attribute SensorType  type;

    /**
     * @if jp
     * センサ位置
     * @endif
     */
    readonly attribute DblArray3   translation;

    /**
     * @if jp
     * センサ姿勢
     * @endif
     */
    readonly attribute DblArray9   rotation;

    /**
     * @if jp
     * センサ最大値
     * @endif
     */
    readonly attribute DblSequence maxValue;
  };

  /**
   * SensorInfo Sequence
   */
  typedef sequence<SensorInfo> SensorInfoSequence;


  /**
   * LinkInfo Interface
   * @author  Ichitaro Kohara, MSTC
   */
  interface LinkInfo
  {
    /**
     * @if jp
     * 位置ベクトル
     * @endif
     */
    readonly attribute DblArray3 translation;

    /**
     * @if jp
     * 姿勢行列
     * @endif
     */
    readonly attribute DblArray9 rotation;

    /**
     * @if jp
     * 質量
     * @endif
     */
    readonly attribute double	 mass;

    /**
     * @if jp
     * 重心位置
     * @endif
     */
    readonly attribute DblArray3 centerOfMass;

    /**
     * @if jp
     * 慣性
     * @endif
     */
    readonly attribute DblArray9 inertia;

    /**
     * @if jp
     * 関節値最大値
     * @endif
     */
    readonly attribute DblSequence ulimit;

    /**
     * @if jp
     * 関節値最小値
     * @endif
     */
    readonly attribute DblSequence llimit;

    /**
     * @if jp
     * 関節速度最大値
     * @endif
     */
    readonly attribute DblSequence uvlimit;

    /**
     * @if jp
     * 関節速度最小値
     * @endif
     */
    readonly attribute DblSequence lvlimit;

    //--- for rotor inertia of servomotor  '01 Jun.29 s.kajita

    /**
     * @if jp
     * ロータ慣性
     * @endif
     */
    readonly attribute double rotorInertia;

    /**
     * @if jp
     * ロータ抵抗
     * @endif
     */
    readonly attribute double rotorResistor;

    /**
     * @if jp
     * ギア比
     * @endif
     */
    readonly attribute double gearRatio;

    /**
     * @if jp
     * ギア効率
     * @endif
     */
    readonly attribute double gearEfficiency;

    /**
     * @if jp
     * トルク定数
     * @endif
     */
    readonly attribute double torqueConst;

    /**
     * @if jp
     * エンコーダパルス
     * @endif
     */
    readonly attribute double encoderPulse;

    /**
     * @if jp
     * 等価集中
     * @endif
     */
    readonly attribute double equivalentInertia;


    /**
     * @if jp
     * バウンダリボックス中心
     * @endif
     */
    readonly attribute DblArray3 bboxCenter;

    /**
     * @if jp
     * バウンダリボックスサイズ
     * @endif
     */
    readonly attribute DblArray3 bboxSize;


    /**
     * @if jp
     * モデル名
     * @endif
     */
    readonly attribute string    name;

    /**
     * @if jp
     * Joint 種別
     * @endif
     */
    readonly attribute string    jointType;

    /**
     * @if jp
     * Joint に対してふられたID
     * @endif
     */
    readonly attribute long      jointId;

    /**
     * @if jp
     * Joint の軸
     * @endif
     */
    readonly attribute DblArray3 jointAxis;


    /**
     * @if jp
     * 親リンク
     * @endif
     */
    readonly attribute long      mother;     // index

    /**
     * @if jp
     * 兄弟リンク
     * @endif
     */
    readonly attribute long      sister;     // index

    /**
     * @if jp
     * 子リンク
     * @endif
     */
    readonly attribute long      daughter;   // index

    readonly attribute SensorInfoSequence  sensors;

    /**
     * @if jp
     * 幾何モデルのトライアングルメッシュを読み込みます。
     * @param start 開始のメッシュ番号
     * @param count 何個メッシュを読み込むか
     * @return トライアングルメッシュ集合
     *
     * 9個の double 値でひとつの三角形を示します。
     * @else
     * Read Triangles
     * @param     jointName   joint name
     * @param     start
     * @param     count       Number of triangles to read
     * @return    group of triangles
     *            every 9 double values represent one triangle
     * @endif
     */
    DblSequence readTriangles(in long start, in long count);
    
  };

  typedef sequence<LinkInfo> LinkInfoSequence;

  /**
   * @if jp
   * @brief CharacterInfo インターフェース定義です。
   *
   * ModelLoader がファイルを読み込みパースした結果はこの CharacterInfo の形で返されます。
   * @endif
   */
  interface CharacterInfo
  {
    /**
     * @if jp
     * キャラクタ名
     * @endif
     */
    readonly attribute string name;

    /**
     * @if jp
     * モデルファイルURL
     * @endif
     */
    readonly attribute string url;

    /**
     * @if jp
     * TODO
     * @endif
     */
    readonly attribute StringSequence info;

    /**
     * @if jp
     * リンク情報が格納される LinkInfo の配列です。
     * @endif
     */
    readonly attribute LinkInfoSequence links;
  };

  /**
   * @if jp
   * @brief ModelLoader インタフェース定義です。
   *
   * テキスト記述されたモデル情報を読み込み、オブジェクトとして提供します。
   * クライアントからは load() して CharacterInfo を取得し、それを DynamicsSimulator等に登録します。
   * @endif
   * @author  Keisuke Saito, KernelInc
   */
  interface ModelLoader : ServerObject
  {

    /**
     * @if jp
     * @brief ModelLoader エラー種別
     * @endif
     */
    enum ModelLoaderError {
      DUMMY, 
      INVALID_OBJECT_NAME,
      INVALID_LINK_NAME,
      INVALID_URL
    };

    /**
     * @if jp
     * @brief ModelLoader 例外
     * @endif
     */
    exception ModelLoaderException
    {
      long    id;
      string  description;
    };

    
    /**
     * @if jp
     * ファイルからロードします。
     * @param   url                 ファイルのURL
     * @return  情報を保持したオブジェクト
     * @endif
     */
    CharacterInfo loadURL(in string url) raises (ModelLoaderException);


    /**
     * @if jp
     * ファイルからキャッシュを使わずにロード します。
     * @param   url                 ファイルのURL
     * @return  情報を保持したオブジェクト
     * @endif
     */
    CharacterInfo reloadURL(in string url) raises (ModelLoaderException);


    /**
     * @if jp
     * キャッシュをクリアします。
     * @endif
     */
    void clearData();


  };

};

#endif
