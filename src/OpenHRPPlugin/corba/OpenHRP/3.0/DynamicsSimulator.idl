// -*- mode: idl; indent-tabs-mode: t; tab-width: 4; c-basic-offset: 4; -*-
/*
 * Copyright (c) 2008, AIST, the University of Tokyo and General Robotix Inc.
 * All rights reserved. This program is made available under the terms of the
 * Eclipse Public License v1.0 which accompanies this distribution, and is
 * available at http://www.eclipse.org/legal/epl-v10.html
 * Contributors:
 * National Institute of Advanced Industrial Science and Technology (AIST)
 * General Robotix Inc. 
 */
#ifndef OPENHRP_DYNAMICS_SIMULATOR_IDL_INCLUDED
#define OPENHRP_DYNAMICS_SIMULATOR_IDL_INCLUDED

#include <cnoid/corba/OpenHRP/3.0/OpenHRPCommon.idl>
#include <cnoid/corba/OpenHRP/3.0/CollisionDetector.idl>

/**
 * @file DynamicsSimulator/corba/DynamicsSimulator.idl
 * @if jp
 * DynamicsSimulator サーバ関連インターフェース
 * @endif
 */
module OpenHRP {

	/**
	   @if jp
	   キャラクタに含まれるセンサ情報
	   各センサの情報を sensorId 順に並べたものです。
	   @endif
	 */
	struct SensorState
	{
		/**
		 * @if jp
		 * 関節角度/並進量
		 * @endif
		 */
		DblSequence			q;

		/**
		 * @if jp
		 * 関節角速度/並進速度
		 * @endif
		 */
		DblSequence			dq;

		/**
		 * @if jp
		 * 関節トルク/力
		 * @endif
		 */
		DblSequence			u;

		/**
		 * @if jp
		 * 力センサ
		 * @endif
		 */
		sequence<DblArray6>	force;

		/**
		 * @if jp
		 * ジャイロセンサ
		 * @endif
		 */
		sequence<DblArray3>	rateGyro;

		/**
		 * @if jp
		 * 加速度センサ
		 * @endif
		 */
		sequence<DblArray3>	accel;
	};

	typedef sequence<SensorState> SensorStateSequence;

	/**
	 * @if jp
	 * @brief DynamicsSimulator インターフェース
	 *
	 * 力学シミュレーションを行うサーバです。使用する際は以下の流れで行います。
	 *
	 * -# DynamicsSimulatorFactory の参照を取得
	 * -# DynamicsSimulatorFactory::create() で DynamicsSimulator を取得
	 * -# registerCharacter() でキャラクタを登録
	 * -# init() でシミュレーションの設定
	 * -# setGVector() で重力ベクトルの設定
	 * -# setCharacterAllJointModes() で関節駆動モードの設定
	 * -# setCharacterAllLinkData() で初期姿勢を与え、 calcWorldForwardKinematics() を実行し順運動学を１回実行
	 * -# registerCollisionCheckPair() をどの関節/キャラクタに対して干渉チェックを実行するかを設定する
	 * -# initSimulation() でサーバの初期化
	 *
	 * 以下、シミュレーションループ
	 *
	 * -# stepSimulation() でシミュレーションを1ステップ実行
	 * -# getWorldState() で現在の状況を取得
	 * @else
	 * Dynamics Server
	 *
	 * @date	2006.02.02
	 * @version	pre2.0 
	 * modified	2006.02.24 some functions needed to specify character name
	 * @endif
	 */
	interface DynamicsSimulator
	{
		/**
		 * @if jp
		 * @brief 関節の駆動モード
		 * @endif
		 */
		enum JointDriveMode {
			HIGH_GAIN_MODE,
			TORQUE_MODE
		};

		/**
		 * @if jp
		 * @brief センサの有効/無効を決定します。
		 * @endif
		 */
		enum SensorOption {
			DISABLE_SENSOR,
			ENABLE_SENSOR
		};

		/**
		 * @if jp
		 * 積分方法 (オイラー法, ルンゲクッタ法)です。
		 * @else
		 * Enum to set Integration Method(Euler, RungeKutta)
		 * @endif
		 */
		enum IntegrateMethod { EULER, RUNGE_KUTTA };
	
		/**
		 * @if jp
		 * サーバを終了します。
		 * @else
		 * Object Destruction
		 * @endif
		 */
		void destroy();

		/**
		 * @if jp
		 * @brief キャラクタを登録する。
		 * 
		 * ModelLoader から得られた情報でキャラクタを登録します。
		 * @param name シミュレーションでのキャラクタ名
		 * @param cinfo ModelLoader から得られる CharacterInfo
		 * @else
		 * Register a character
		 * @param	name	Object Character Name for Simulation
		 * @param	cinfo	CharacterInfo
		 * @endif
		 */
		void registerCharacter(in string name, in CharacterInfo cinfo);

		/**
		 * @if jp
		 * @brief サーバを初期化します。
		 *
		 * シミュレーションの条件を設定し、サーバを初期化します。
		 * @param timeStep シミュレーション1ステップごとの時間[s]
		 * @param integrateopt 積分に用いる手法(オイラー法, ルンゲクッタ法)
		 * @param sensorOpt センサーを使用するか
		 * @else
		 * Initialise Server
		 * @param timeStep		The timestep to be used for integration.
		 * @param integrateOpt  The integration method to use.
		 * @param sensorOpt	    The sensor option to be used.
		 * @endif
		 */
		void init(
				  in double		timeStep,
				  in IntegrateMethod	integrateOpt,
				  in SensorOption	sensorOpt
				  );
	

		/**
		 * @if jp
		 * @brief 衝突検出ペアを追加します。
		 *
		 * ここで登録されたペア同士の衝突検出が行われます。
		 *
		 * K と C の長さを0にするとスプリング-ダンパ法は使用されません。
		 * @param	char1	  リンクのキャラクタ名
		 * @param	name1	  リンク名
		 * @param	char2     もう一方のキャラクタ名
		 * @param	name2     リンク名
		 * @param	staticFriction  静止摩擦係数
		 * @param   slipFriction  動摩擦係数
		 * @param	K ばね係数
		 * @param	C ダンパ係数
		 * @else
		 * Add Collision Pairs
		 * @param	char1	  Name of character for first link
		 * @param	name1	  Name of first link
		 * @param	char2     Name of character for second link
		 * @param	name2     Name of second link
		 * @param	staticFriction  Static Friction
		 * @param   slipFriction  Slip Friction
		 * @param	K Parameters for Spring
		 * @param	C Parameters for Damper
		 * K and C should be of zero length for no Spring-Damper stuff.
		 * @endif
		 */
		void registerCollisionCheckPair
		(
		 in string char1,
		 in string name1,
		 in string char2,
		 in string name2,
		 in double staticFriction,
		 in double slipFriction,
		 in DblSequence6 K,
		 in DblSequence6 C
		 );
  

		/**
		 * @if jp
		 * @brief 仮想リンクを追加します。
		 *
		 * @note 実装されていません。
		 * @param	char1			 キャラクタ名
		 * @param	link1			 リンク名
		 * @param	char2			 もう一方のキャラクタ名
		 * @param	link2			 リンク名
		 * @param	relTransform	 ふたつのリンク関係の回転/位置のクォータニアン
		 * @param   transformDefined どちらの変換が使用されるか
		 * @param	constraint		 拘束する自由度
		 * @param	connectionName	 仮想リンクの名前
		 *
		 * @else
		 * register Virtual Link
		 * @param	char1			 Name of character for first link
		 * @param	link1			 Name of first link
		 * @param	char2			 Name of character for second link
		 * @param	link2			 Name of second link
		 * @param	relTransform	 relative pos+att as quaternion transform
		 * @param   transformDefined Flag for whether tranform is defined.
		 * @param	constraint		 Constraints to be included in Link.
		 * @param	connectionName	 Name for the virtual link.
		 * Unimplemented
		 * @endif
		 */
		void registerVirtualLink
		(
		 in string				char1,
		 in string				link1,
		 in string            	char2,
		 in string				link2,
		 in LinkPosition 		relTransform,
		 in short				transformDefined,
		 in DblSequence9		constraint,
		 in string				connectionName
		 );
	

		/**
		 * @if jp
		 * @brief registerVirtualLink() で登録した拘束にかかる力を取得します。
		 *
		 * @note 実装されていません
		 * @param	characterName   キャラクタ名
		 * @param	connectionName  コネクション名
		 * @param	contactForce    拘束にかかる力
		 *
		 * @else
		 * Get Connection Constraint Force
		 *
		 * @param	characterName   Character Name
		 * @param	connectionName  Connection Name
		 * @param	contactForce    Connection Contraint Force
		 * unimplemented
		 * @endif
		 */
		void getConnectionConstraintForce
		(
		 in  string		characterName,
		 in  string		connectionName,
		 out DblSequence6	contactForce
		 );

		/**
		 * @if jp
		 * @brief センサ値を取得します。
		 *
		 * @param   characterName	センサーがついているキャラクタ名
		 * @param	sensorName		センサ名
		 * @param	sensorOutput	センサ出力
		 *
		 * @else
		 * Get Sensor Values
		 * @param   characterName	Name of character with sensor.
		 * @param	sensorName		Name of sensor.
		 * @param	sensorOutput	Place to put data from sensor.
		 * @endif
		 */
		void getCharacterSensorValues
		(
		 in  string	characterName,
		 in  string	sensorName,
		 out DblSequence values
		 );


		/**
		 * @if jp
		 * @brief シミュレーション前の初期化をおこないます。
		 *
		 * このメソッドは全ての設定が終了した後に呼ばれなければなりません。
		 * メソッド stepSimulation() はこのメソッド終了後に呼ぶことができます。
		 * @else
			Initialize the simulation state so that the simulator can begin a simulation.

			This function must be called after all the configuration of simulation has finished.
			Method stepSimulation() can be called after calling this function.
			@endif
		*/
		void initSimulation();


		/**
		 * @if jp
		 * @brief シミュレーション世界での次の状態を計算します。
		 *
		 * ループで繰り返し呼ぶことによりシミュレーションが行われます。
		 *
		 * メソッド initSimulation() はこのループの前に呼んでください。
		 * @else
			calculate the next state of the simulation world.
			
			The function repeatedly called in the simulation loop.
			Method initSimulaiton() must be called before running the simulation loop.
			* endif
		*/
		void stepSimulation();

  
		/**
		 * @if jp
		 * @brief 取得/セットできるリンクのデータ種別です。
		 *
		 * @else		 
		 * Enum for various types of data that can be set 
		 * through setCharacterLinkData
		 * @endif
		 */
		enum LinkDataType {
			INVALID_DATA_TYPE,
			POSITION_GIVEN,		// boolean
			JOINT_VALUE,		// double (joint angle or translation)
			JOINT_VELOCITY,		// double 
			JOINT_ACCELERATION,	// double
			JOINT_TORQUE,		// double (joint torque or force)
			ABS_TRANSFORM,      // double x 12 (first 3 - translation, last 9 - rotation matrix(row major))
			ABS_VELOCITY,	    // double x 6 (linear, angular)
			EXTERNAL_FORCE	    // double x 6 (force ,torque)
		};

		/**
		 * @if jp
		 * @brief データをリンクへセットします。
		 *
		 * @param	character	キャラクタ名
		 * @param	link		リンク名
		 * @param	type		データ種別
		 * @param	data		データ
		 * @else
		 * Set Data to Link
		 * @param	character	Character Name
		 * @param	link		Link Name
		 * @param	type		Type of data to Set
		 * @param	data		Data to send
		 * @endif
		 */
		void setCharacterLinkData
		(
		 in string			character,
		 in string			link,
		 in LinkDataType	type,
		 in DblSequence		data
		 );

		/**
		 * @if jp
		 * @brief リンクのデータを取得します。
		 * @param	characterName	キャラクタ名
		 * @param	link			リンク名
		 * @param	type			取得するデータ種別
		 * @param	rdata			データ
		 * @else
		 * Get Data from Link
		 * @param	characterName	Character Name
		 * @param	link			Link Name
		 * @param	type			Type of data to get
		 * @param	rdata			Data placement area
		 * @endif
		 */
		void getCharacterLinkData
		(
		 in	 string 			characterName,
		 in  string				link,
		 in  LinkDataType		type,
		 out DblSequence		rdata
		 );
  

		//! Get Character Data, 
		/**
		 * @if jp
		 * @brief リンクのデータを全て取得します。
		 *
		 * Joint のうち、 jointId がついているもののデータを jointId順に取得します。
		 *
		 * 角度、速度、加速度、トルクのみが有効です。
		 * @param	characterName	キャラクタ名
		 * @param	type		データ種別 (角度、速度、加速度、トルクのみが有効)
		 * @param	wdata		データ
		 * 
		 * @else
		 * Joint - (Angle, Speed, Acceleration, Torque)
		 * for all links
		 * @param	characterName	Character Name
		 * @param	type		Data to set.Only valid for:
		 *						angle, velocity, acceleration, torque
		 * @param	wdata		Parameter Value
		 * @endif
		 * todo
		 */
		void getCharacterAllLinkData
		(
		 in string				characterName,
		 in LinkDataType		type,
		 out DblSequence		wdata
		 );

		//! Set Character Data, 
		/**
		 * @if jp
		 * リンクのデータを全てセットします。
		 * 
		 * Joint のうち、 jointId がついているもののデータを jointId順に取得します。
		 * 
		 * 角度、速度、加速度、トルクのみが有効です。
		 *
		 *
		 * @param	characterName	キャラクタ名
		 * @param	type		データ種別 (角度、速度、加速度、トルクのみが有効)
		 * @param	wdata		データ
		 * @else
		 * Joint - (Angle, Speed, Acceleration, Torque)
		 * for all links
		 * @param	characterName	Character Name
		 * @param	type		Data to set.Only valid for:
		 *						angle, velocity, acceleration, torque
		 * @param	wdata		Parameter Value
		 * @endif
		 */
		void setCharacterAllLinkData
		(
		 in string				characterName,
		 in LinkDataType		type,
		 in DblSequence			wdata
		 );

	
		/**
		 * @if jp
		 * @brief 重力ベクトルを設定します。
		 *
		 * @param wdata 重力ベクトル
		 * @else
		 * Set World G-Vector
		 * @endif
		 */
		void setGVector(in DblSequence3 wdata);

		/**
		 * @if jp
		 * @brief 重力ベクトルを取得します。
		 * @param 重力ベクトル
		 * @else
		 * Get World G-Vector
		 * @endif
		 */
		void getGVector(out DblSequence3 wdata);


		/**
		 * @if jp
		 * @brief キャラクタの全ての Joint のモードをセットします。
		 * 
		 * @param キャラクタ名
		 * @param モード
		 * @else
		 * Set Character All Joint Modes
		 * @param characterName
		 * @param jointMode
		 * @endif
		 */
		void setCharacterAllJointModes
		(
		 in string			characterName,
		 in JointDriveMode 	jointMode
		 );


		/**
		 * @if jp
		 * @brief 逆運動学を計算します。
		 * @param characterName 計算する対象のキャラクタ名
		 * @param baseLink		ベースの動かないリンク
		 * @param targetLink	ターゲットの動くリンク
		 * @param target		目標の位置と姿勢
		 * @else
		 * Calculate Inverse Kinematics
		 * @param characterName Name of Character to move
		 * @param baseLink		Name of the base link(not moved)
		 * @param targetLink	Name of the target link(moved)
		 * @param target		Goal position and attitude for target link.
		 * @endif
		 */
		boolean calcCharacterInverseKinematics
		(
		 in string					characterName,
		 in string					baseLink,
		 in string					targetLink,
		 in LinkPosition			target
		 );

		
		/**
		 * @if jp
		 * @brief キャラクタの順運動学を計算します。
		 * @param characterName キャラクタ名
		 * @else
		 * Calculate forward kinematics for a character in world.
		 * @param characterName
		 * @endif
		 */
		void calcCharacterForwardKinematics(in string characterName);


		/**
		 * @if jp
		 * @brief 全てのキャラクタ順運動学を計算します。
		 * @else
		 * Calculate all forward kinematics for all characters in world.
		 * @endif
		 */
		void calcWorldForwardKinematics();

		/**
		 * @if jp
		 * @brief 全てのキャラクタ順運動学を計算し、干渉チェックを行います。
		 * @else
		 * Check for collision after calculation of kinematics.
		 * @endif
		 */
		void checkCollision();

		/**
		 * @if jp
		 * @brief シミュレーションの状態を表すWorldStateを取得します。
		 * @param state シミュレーションの状態
		 * @else
		 * Get state of simulated world
		 * @param state     State of simulated world
		 * @endif
		 */
		void getWorldState(out WorldState wstate);

		/**
		 * @if jp
		 * @brief キャラクタのセンサ状態一覧を取得します。
		 * @param characterName キャラクタ名
		 * @param sstate センサ状態一覧
		 * @endif
		 */
		void getCharacterSensorState(in string characterName, out SensorState sstate);

		
		/**
		 * @if jp
		 * @brief 衝突しているリンクのペアを取得します。
		 * @param characterName 取得するキャラクタ名
		 * @param pairs 衝突しているペアについての情報
		 * @else
		 * Get information on colliding pairs
		 * @param characterName Name of Character to check
		 * @param pairs			Information on colliding pairs.
		 * @endif
		 */
		boolean getCharacterCollidingPairs
		(
		 in string				characterName,
		 out LinkPairSequence	pairs
		 );
  
		/**
		 * @if jp
		 * @brief キャラクタの指定したリンクパスに対するヤコビアンを取得します。
		 * @param characterName	ヤコビアンを計算するキャラクタ名
		 * @param baseLink		ベースのリンク名
		 * @param targetLink	ターゲットのリンク名
		 * @param jacobian		結果のヤコビアン
		 * @else
		 * compute the Jacobian matrix and its time derivative
		 * @param characterName	Name of Character to calculate Jacobian.
		 * @param baseLink		Name of base link.
		 * @param targetLink	Name of target link.
		 * @param jacobian		Jacobian Matrix returned from function here.
		 * @endif
		 */
		void calcCharacterJacobian
		(
		 in string characterName,
		 in string baseLink, 
		 in string targetLink, 
		 out DblSequence jacobian 
		 );
	};

	/**
	 * DynamicsSimulator Factory
	 */
	interface DynamicsSimulatorFactory : ServerObject
	{
	
		/**
		 * @if jp
		 * @brief DynamicsSimulator を作成します。
		 * @else
		 * Create DynamicsSimulator
		 * @endif
		 */
		DynamicsSimulator create();
	
	};

};

#endif

